// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model News {
  id            String   @id @default(cuid())
  title         String
  title_ta      String?
  content       String
  content_ta    String?
  excerpt       String
  excerpt_ta    String?
  category      String
  author        String
  featuredImage String?
  publishedAt   DateTime @default(now())
  views         Int      @default(0)
  featured      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("news")
}

model Event {
  id            String   @id @default(cuid())
  title         String
  title_ta      String?
  description   String
  description_ta String?
  location      String
  location_ta   String?
  featuredImage String?
  startDate     DateTime
  endDate       DateTime?
  category      String
  status        String   @default("upcoming") // upcoming, ongoing, completed
  featured      Boolean  @default(false)
  registrations Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("events")
}

// Radio Show Folders (e.g., "Hello Madurai", "Music Shows", etc.)
model RadioFolder {
  id          String   @id @default(cuid())
  name        String
  name_ta     String?
  description String?
  description_ta String?
  coverImage  String?
  featured    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationship to radio shows
  radioShows  RadioShow[]

  @@map("radio_folders")
}

// Individual Radio Shows within folders
model RadioShow {
  id          String   @id @default(cuid())
  title       String
  title_ta    String?
  description String
  description_ta String?
  host        String
  duration    String
  audioUrl    String
  featured    Boolean  @default(false)
  plays       Int      @default(0)
  publishedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationship to folder
  folderId    String
  folder      RadioFolder @relation(fields: [folderId], references: [id], onDelete: Cascade)

  @@map("radio_shows")
}

model Business {
  id          String   @id @default(cuid())
  name        String
  name_ta     String?
  description String
  description_ta String?
  category    String
  phone       String?
  email       String?
  website     String?
  address     String
  address_ta  String?
  featured    Boolean  @default(false)
  verified    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("businesses")
}

model Video {
  id          String   @id @default(cuid())
  title       String
  title_ta    String?
  description String
  description_ta String?
  videoUrl    String   // YouTube URL or video file URL
  youtubeId   String?  // YouTube video ID for embedding
  thumbnail   String?
  category    String
  duration    String?
  views       Int      @default(0)
  featured    Boolean  @default(false)
  publishedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("videos")
}

// Magazine Collections (e.g., "Monthly Issues", "Special Editions", etc.)
model MagazineCollection {
  id          String   @id @default(cuid())
  name        String
  name_ta     String?
  description String?
  description_ta String?
  coverImage  String?
  featured    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationship to magazines
  magazines   Magazine[]

  @@map("magazine_collections")
}

// Individual Magazines within collections
model Magazine {
  id            String   @id @default(cuid())
  title         String
  title_ta      String?
  description   String
  description_ta String?
  pdfUrl        String
  coverImage    String?
  featuredImage String?
  issueNumber   String
  publishedAt   DateTime @default(now())
  downloads     Int      @default(0)
  featured      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationship to collection
  collectionId  String
  collection    MagazineCollection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@map("magazines")
}
